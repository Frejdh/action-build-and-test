name: Maven build and test
description: Action for building and testing maven repositories

inputs:
  java-version:
    description: JDK version to use. Default is '21'.
    required: false
    default: '21'

  java-distribution:
    description: JDK distribution to use. Default is 'temurin'.
    required: false
    default: 'temurin'

  cache-id:
    description: ID (subkey) for the cache'
    required: false
    default: 'v2'

  build-arguments:
    description: Arguments for the maven build. Default 'mvn -B package -DskipTests -e [CUSTOM ARGS]'
    required: false

  test-arguments:
    description: Arguments for the maven test run. Default 'mvn clean test -e [CUSTOM ARGS]'
    required: false

  integration-test-arguments:
    description: Arguments for the maven integration test run (should be configured when enabled). Default 'mvn clean test -e [CUSTOM ARGS]'
    required: false

  run-integration-tests:
    description: Whether to enable the extra maven test run intended for integration tests. False by default
    required: false
    default: 'false'

  commitish:
    description: Git reference (branch/commit)
    required: false

runs:
  using: composite
  steps:
    - name: Checkout branch code
      uses: actions/checkout@v5
      with:
        ref: "${{ inputs.commitish }}"
    - name: Set up JDK ${{ inputs.java-version }} (${{ inputs.java-distribution }})
      uses: actions/setup-java@v5
      with:
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.java-distribution }}
    - name: Set up cache for Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: maven-${{ inputs.cache-id }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          maven-
    - name: Build project
      shell: bash
      run: >
        mvn -B install -DskipTests -e
        ${{ inputs.build-arguments }}
    - name: Run unit tests
      shell: bash
      run: >
        mvn clean test -e
        ${{ inputs.test-arguments }}
    - name: Run integration tests
      shell: bash
      if: inputs.run-integration-tests == 'true' || inputs.run-integration-tests == 'True'
      run: >
        mvn clean test -e
        ${{ inputs.integration-test-arguments }}
